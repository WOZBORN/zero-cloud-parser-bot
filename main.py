import random

import telebot
import feedparser
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# üîê –¢–æ–∫–µ–Ω (–≤ –ø—Ä–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = "7104233246:AAGG94bvzxVog3boMnWWh9wZhczkn5SkfOQ"
bot = telebot.TeleBot(TOKEN)

# üì∞ RSS-—Å—Å—ã–ª–∫–∏
RSS_SOURCES = {
    "python": "https://habr.com/ru/rss/hubs/python/articles/?fl=ru",
    "chatgpt": "https://habr.com/ru/rss/search/?q=chatgpt&order_by=relevance&target_type=posts&hl=ru&fl=ru",
    "vk": "https://habr.com/ru/rss/companies/vk/articles/?fl=ru"
}

def get_latest_articles(rss_url, limit=5):
    feed = feedparser.parse(rss_url)
    articles = []

    for entry in feed.entries[:limit]:
        title = entry.title
        link = entry.link
        published = entry.published
        articles.append(f"üì∞ <b>{title}</b>\nüìÖ {published}\nüîó {link}")
    return articles

# üí¨ –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üêç Python", callback_data="news_python"),
        InlineKeyboardButton("ü§ñ ChatGPT", callback_data="news_chatgpt"),
        InlineKeyboardButton("üíô VK", callback_data="news_vk")
    )
    if (random.randint(0, 1) == 0):
        url = "https://cdn.mtdv.me/video/rick.mp4"
    else:
        url = "https://habr.com/ru/feed/"
    markup.add(InlineKeyboardButton("üìñ –•–∞–±—Ä", url=url))
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ —Å Habr.\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:",
        reply_markup=markup
    )

# üí¨ –ö–æ–º–∞–Ω–¥–∞ /news
@bot.message_handler(commands=['news'])
def ask_topic(message):
    try:
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("üêç Python", callback_data="news_python"),
            InlineKeyboardButton("ü§ñ ChatGPT", callback_data="news_chatgpt"),
            InlineKeyboardButton("üíô VK", callback_data="news_vk")
        )
        message_text = "–∫–∞–∫–∞–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç"
        message_count = len(message_text)//4096
        for i in range(message_count+1):
            bot.send_message(message.chat.id, message_text[i*4096:(i+1)*4096], reply_markup=markup)
    except:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @support")
        # –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("news_"))
def handle_news_choice(call):
    topic = call.data.split("_")[1]
    rss_url = RSS_SOURCES.get(topic)
    if not rss_url:
        bot.answer_callback_query(call.id, "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    bot.answer_callback_query(call.id, f"–ó–∞–≥—Ä—É–∂–∞—é {topic.capitalize()} —Å—Ç–∞—Ç—å–∏...")
    articles = get_latest_articles(rss_url)
    for article in articles:
        bot.send_message(call.message.chat.id, article, parse_mode="HTML")

# üîÅ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_poling()
